#if 1
void motor_tR(uint8 speed,uint32 delay);    
void motor_tL(uint8 speed,uint32 delay);
void zmain(void)
{
    IR_Start();
    Ultra_Start();
    reflectance_start();
    LSM303D_Start();
    motor_start();
    TickType_t start;
    TickType_t end;
    struct sensors_ dig;
    struct accData_ data;
    float hit_x = 0;
    float hit_y = 0;
    float value_hit = 0;
    float angle;
    int time;
    reflectance_set_threshold(9500, 9000, 11000, 11000, 9000, 9500);
    int distance = 0;
    vTaskDelay(1);
    motor_forward(0,0);
    reflectance_digital(&dig);
    distance = Ultra_GetDistance();
    LSM303D_Read_Acc(&data);
    
    while(SW1_Read() != 0)
    {
        vTaskDelay(100);
    }
    start = xTaskGetTickCount();
    reflectance_digital(&dig);
    while((dig.l3 == 0 || dig.r3 == 0) && (dig.l1 == 1 || dig.r1 == 1))
    {
        
        motor_forward(100,0);
        reflectance_digital(&dig);
    }
    if((dig.l3 == 1) && (dig.l2 == 1) && (dig.l1 == 1) && (dig.r1 == 1) && (dig.r2 == 1) && (dig.r3 == 1))
    {
        reflectance_digital(&dig); 

        while(dig.l3 == 1 || dig.r3 == 1)
        {
            
            motor_forward(100,0);
            reflectance_digital(&dig); 
        }
    }
    motor_forward(0,0);
    print_mqtt("Zumo061/ready","line");    
    IR_wait(); 
    end = xTaskGetTickCount();
    time=end-start;
    print_mqtt("Zumo061/start","%d",time);  

    while(true){
        
        reflectance_digital(&dig);
        while((dig.l3 == 0) && (dig.r3 == 0))
        {
            reflectance_digital(&dig);
            motor_forward(150,0);
            distance = Ultra_GetDistance();
           
            if(distance < 15)
            {
                reflectance_read(&dig);
                motor_forward(240,0);
    
            }
        }
            //if the robot gets a value over 4000 in x/y axis it will print in the mqtt the angle
            //that the robot got hit
            /*if(hit_x > 4000 || hit_y > 4000)
            {
                LSM303D_Read_Acc(&data);               
                hit_x = hit_x/16000;
                hit_y = hit_y/16000;
                value_hit = hit_x/hit_y;
                angle = ((atan(value_hit))*180)/M_PI;
                //we need to print out the angle so %.2f,angle
                
            }
*/
//if robot meets with the ring border then it will move a little bit backwards
//and then tank turn to the right & calculates the angle if got hit during the process
            //else 
            if(dig.l3 == 1 || dig.r3 == 1 || dig.r2 == 1 || dig.l2 == 1 || dig.r1 == 1 || dig.l1 == 1)
            {
                  
                //distance = Ultra_GetDistance();
                motor_backward(200,100);
                reflectance_digital(&dig);
                motor_tR(220,300);             
             }  
        }

}
void motor_tR(uint8 speed,uint32 delay)
{
    MotorDirLeft_Write(0);      // set LeftMotor forward mode
    MotorDirRight_Write(1);     // set RightMotor backward mode
    PWM_WriteCompare1(speed); 
    PWM_WriteCompare2(speed); 
    vTaskDelay(delay);
}
void motor_tL(uint8 speed,uint32 delay)
{
    MotorDirLeft_Write(1);      // set LeftMotor backward mode
    MotorDirRight_Write(0);     // set RightMotor forward mode
    PWM_WriteCompare1(speed); 
    PWM_WriteCompare2(speed); 
    vTaskDelay(delay);
}
     
