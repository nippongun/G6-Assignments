// Line following
#if 1 
void motor_tR(uint8 l_speed, uint8 r_speed, uint32 delay);    
void motor_tL(uint8 l_speed, uint8 r_speed, uint32 delay);    
void zmain(void)
 { 
    struct sensors_ dig;
    reflectance_start();
    motor_start();
    IR_Start();
    int count = 0;
    reflectance_set_threshold(9500, 7000, 12000, 12000, 7000, 9500);
    while(SW1_Read() != 0)
    {
        vTaskDelay(100);
    }
    reflectance_digital(&dig);
    while((dig.l3 == 0 || dig.r3 == 0) && (dig.l1 == 1 || dig.r1 == 1))
    {
        reflectance_digital(&dig);
        motor_forward(100,1);
    }
    if((count == 0) && (dig.l3 == 1) && (dig.l2 == 1) && (dig.l1 == 1) && (dig.r1 == 1) && (dig.r2 == 1) && (dig.r3 == 1))
    {
        reflectance_digital(&dig); 
        count++;
        while(dig.l3 == 1 || dig.r3 == 1)
        {
            reflectance_digital(&dig); 
            motor_forward(100,1);
        }
    }
    motor_forward(0,0);
    IR_wait();    
    while(1) 
    {
        reflectance_digital(&dig);
        //forward
        while((dig.l1 == 1) && (dig.r1 == 1) && (dig.r2 == 0 || dig.l2 == 0))
        {           
            reflectance_digital(&dig);
            motor_forward(230,1);
        }
        reflectance_digital(&dig);
        //fix right
        while((dig.l1 == 0)&&(dig.r2 == 1))
            {
            reflectance_digital(&dig);
            motor_tR(120,95,1);
            }
        reflectance_digital(&dig);
        //fix left    
        while((dig.r1 == 0)&&(dig.l2 == 1))    
        {
            reflectance_digital(&dig);        
            motor_tL(95,120,1);
        }
        //stop
        if((count == 1)&&(dig.l3 == 1) && (dig.l2 == 1) && (dig.l1 == 1) && (dig.r1 == 1) && (dig.r2 == 1) && (dig.r3 == 1))
        {
            reflectance_digital(&dig); 
            count++;
            while((dig.l3 == 1) && (dig.l2 == 1) && (dig.l1 == 1) && (dig.r1 == 1) && (dig.r2 == 1) && (dig.r3 == 1))
        {
            reflectance_digital(&dig); 
            motor_forward(100,1);
        }
        }
        reflectance_digital(&dig); 
        if((count == 2)&&(dig.l3 == 1) && (dig.l2 == 1) && (dig.l1 == 1) && (dig.r1 == 1) && (dig.r2 == 1) && (dig.r3 == 1))
        {
            reflectance_digital(&dig); 
            count++;
            while((dig.l3 == 1) && (dig.l2 == 1) && (dig.l1 == 1) && (dig.r1 == 1) && (dig.r2 == 1) && (dig.r3 == 1))
        {
            reflectance_digital(&dig); 
            motor_stop();
        }
        }
    }
}
void motor_tR(uint8 l_speed, uint8 r_speed, uint32 delay)
{
    
    MotorDirLeft_Write(0);      // set LeftMotor forward mode
    MotorDirRight_Write(1);     // set RightMotor backward mode
    PWM_WriteCompare1(l_speed); 
    PWM_WriteCompare2(r_speed); 
    vTaskDelay(delay);
}
void motor_tL(uint8 l_speed, uint8 r_speed, uint32 delay)
{
    MotorDirLeft_Write(1);      // set LeftMoto0 backward mode
    MotorDirRight_Write(0);     // set RightMotor forward mode
    PWM_WriteCompare1(l_speed); 
    PWM_WriteCompare2(r_speed); 
    vTaskDelay(delay);
}
#endif 